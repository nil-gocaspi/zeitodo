// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"example-project/handler"
	"example-project/model"
	"sync"
)

type FakeServiceInterface struct {
	GetEmployeeByIdStub        func(string) model.Employee
	getEmployeeByIdMutex       sync.RWMutex
	getEmployeeByIdArgsForCall []struct {
		arg1 string
	}
	getEmployeeByIdReturns struct {
		result1 model.Employee
	}
	getEmployeeByIdReturnsOnCall map[int]struct {
		result1 model.Employee
	}
	GetProposalsByIDStub        func(string) ([]model.Proposal, error)
	getProposalsByIDMutex       sync.RWMutex
	getProposalsByIDArgsForCall []struct {
		arg1 string
	}
	getProposalsByIDReturns struct {
		result1 []model.Proposal
		result2 error
	}
	getProposalsByIDReturnsOnCall map[int]struct {
		result1 []model.Proposal
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceInterface) GetEmployeeById(arg1 string) model.Employee {
	fake.getEmployeeByIdMutex.Lock()
	ret, specificReturn := fake.getEmployeeByIdReturnsOnCall[len(fake.getEmployeeByIdArgsForCall)]
	fake.getEmployeeByIdArgsForCall = append(fake.getEmployeeByIdArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetEmployeeByIdStub
	fakeReturns := fake.getEmployeeByIdReturns
	fake.recordInvocation("GetEmployeeById", []interface{}{arg1})
	fake.getEmployeeByIdMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceInterface) GetEmployeeByIdCallCount() int {
	fake.getEmployeeByIdMutex.RLock()
	defer fake.getEmployeeByIdMutex.RUnlock()
	return len(fake.getEmployeeByIdArgsForCall)
}

func (fake *FakeServiceInterface) GetEmployeeByIdCalls(stub func(string) model.Employee) {
	fake.getEmployeeByIdMutex.Lock()
	defer fake.getEmployeeByIdMutex.Unlock()
	fake.GetEmployeeByIdStub = stub
}

func (fake *FakeServiceInterface) GetEmployeeByIdArgsForCall(i int) string {
	fake.getEmployeeByIdMutex.RLock()
	defer fake.getEmployeeByIdMutex.RUnlock()
	argsForCall := fake.getEmployeeByIdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceInterface) GetEmployeeByIdReturns(result1 model.Employee) {
	fake.getEmployeeByIdMutex.Lock()
	defer fake.getEmployeeByIdMutex.Unlock()
	fake.GetEmployeeByIdStub = nil
	fake.getEmployeeByIdReturns = struct {
		result1 model.Employee
	}{result1}
}

func (fake *FakeServiceInterface) GetEmployeeByIdReturnsOnCall(i int, result1 model.Employee) {
	fake.getEmployeeByIdMutex.Lock()
	defer fake.getEmployeeByIdMutex.Unlock()
	fake.GetEmployeeByIdStub = nil
	if fake.getEmployeeByIdReturnsOnCall == nil {
		fake.getEmployeeByIdReturnsOnCall = make(map[int]struct {
			result1 model.Employee
		})
	}
	fake.getEmployeeByIdReturnsOnCall[i] = struct {
		result1 model.Employee
	}{result1}
}

func (fake *FakeServiceInterface) GetProposalsByID(arg1 string) ([]model.Proposal, error) {
	fake.getProposalsByIDMutex.Lock()
	ret, specificReturn := fake.getProposalsByIDReturnsOnCall[len(fake.getProposalsByIDArgsForCall)]
	fake.getProposalsByIDArgsForCall = append(fake.getProposalsByIDArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetProposalsByIDStub
	fakeReturns := fake.getProposalsByIDReturns
	fake.recordInvocation("GetProposalsByID", []interface{}{arg1})
	fake.getProposalsByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) GetProposalsByIDCallCount() int {
	fake.getProposalsByIDMutex.RLock()
	defer fake.getProposalsByIDMutex.RUnlock()
	return len(fake.getProposalsByIDArgsForCall)
}

func (fake *FakeServiceInterface) GetProposalsByIDCalls(stub func(string) ([]model.Proposal, error)) {
	fake.getProposalsByIDMutex.Lock()
	defer fake.getProposalsByIDMutex.Unlock()
	fake.GetProposalsByIDStub = stub
}

func (fake *FakeServiceInterface) GetProposalsByIDArgsForCall(i int) string {
	fake.getProposalsByIDMutex.RLock()
	defer fake.getProposalsByIDMutex.RUnlock()
	argsForCall := fake.getProposalsByIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceInterface) GetProposalsByIDReturns(result1 []model.Proposal, result2 error) {
	fake.getProposalsByIDMutex.Lock()
	defer fake.getProposalsByIDMutex.Unlock()
	fake.GetProposalsByIDStub = nil
	fake.getProposalsByIDReturns = struct {
		result1 []model.Proposal
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) GetProposalsByIDReturnsOnCall(i int, result1 []model.Proposal, result2 error) {
	fake.getProposalsByIDMutex.Lock()
	defer fake.getProposalsByIDMutex.Unlock()
	fake.GetProposalsByIDStub = nil
	if fake.getProposalsByIDReturnsOnCall == nil {
		fake.getProposalsByIDReturnsOnCall = make(map[int]struct {
			result1 []model.Proposal
			result2 error
		})
	}
	fake.getProposalsByIDReturnsOnCall[i] = struct {
		result1 []model.Proposal
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getEmployeeByIdMutex.RLock()
	defer fake.getEmployeeByIdMutex.RUnlock()
	fake.getProposalsByIDMutex.RLock()
	defer fake.getProposalsByIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.ServiceInterface = new(FakeServiceInterface)
