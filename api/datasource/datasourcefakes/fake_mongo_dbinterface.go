// Code generated by counterfeiter. DO NOT EDIT.
package datasourcefakes

import (
	"context"
	"example-project/datasource"
	"sync"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type FakeMongoDBInterface struct {
	FindOneStub        func(context.Context, interface{}, ...*options.FindOneOptions) *mongo.SingleResult
	findOneMutex       sync.RWMutex
	findOneArgsForCall []struct {
		arg1 context.Context
		arg2 interface{}
		arg3 []*options.FindOneOptions
	}
	findOneReturns struct {
		result1 *mongo.SingleResult
	}
	findOneReturnsOnCall map[int]struct {
		result1 *mongo.SingleResult
	}
	InsertManyStub        func(context.Context, []interface{}, ...*options.InsertManyOptions) (*mongo.InsertManyResult, error)
	insertManyMutex       sync.RWMutex
	insertManyArgsForCall []struct {
		arg1 context.Context
		arg2 []interface{}
		arg3 []*options.InsertManyOptions
	}
	insertManyReturns struct {
		result1 *mongo.InsertManyResult
		result2 error
	}
	insertManyReturnsOnCall map[int]struct {
		result1 *mongo.InsertManyResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMongoDBInterface) FindOne(arg1 context.Context, arg2 interface{}, arg3 ...*options.FindOneOptions) *mongo.SingleResult {
	fake.findOneMutex.Lock()
	ret, specificReturn := fake.findOneReturnsOnCall[len(fake.findOneArgsForCall)]
	fake.findOneArgsForCall = append(fake.findOneArgsForCall, struct {
		arg1 context.Context
		arg2 interface{}
		arg3 []*options.FindOneOptions
	}{arg1, arg2, arg3})
	stub := fake.FindOneStub
	fakeReturns := fake.findOneReturns
	fake.recordInvocation("FindOne", []interface{}{arg1, arg2, arg3})
	fake.findOneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMongoDBInterface) FindOneCallCount() int {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	return len(fake.findOneArgsForCall)
}

func (fake *FakeMongoDBInterface) FindOneCalls(stub func(context.Context, interface{}, ...*options.FindOneOptions) *mongo.SingleResult) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = stub
}

func (fake *FakeMongoDBInterface) FindOneArgsForCall(i int) (context.Context, interface{}, []*options.FindOneOptions) {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	argsForCall := fake.findOneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMongoDBInterface) FindOneReturns(result1 *mongo.SingleResult) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = nil
	fake.findOneReturns = struct {
		result1 *mongo.SingleResult
	}{result1}
}

func (fake *FakeMongoDBInterface) FindOneReturnsOnCall(i int, result1 *mongo.SingleResult) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = nil
	if fake.findOneReturnsOnCall == nil {
		fake.findOneReturnsOnCall = make(map[int]struct {
			result1 *mongo.SingleResult
		})
	}
	fake.findOneReturnsOnCall[i] = struct {
		result1 *mongo.SingleResult
	}{result1}
}

func (fake *FakeMongoDBInterface) InsertMany(arg1 context.Context, arg2 []interface{}, arg3 ...*options.InsertManyOptions) (*mongo.InsertManyResult, error) {
	var arg2Copy []interface{}
	if arg2 != nil {
		arg2Copy = make([]interface{}, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.insertManyMutex.Lock()
	ret, specificReturn := fake.insertManyReturnsOnCall[len(fake.insertManyArgsForCall)]
	fake.insertManyArgsForCall = append(fake.insertManyArgsForCall, struct {
		arg1 context.Context
		arg2 []interface{}
		arg3 []*options.InsertManyOptions
	}{arg1, arg2Copy, arg3})
	stub := fake.InsertManyStub
	fakeReturns := fake.insertManyReturns
	fake.recordInvocation("InsertMany", []interface{}{arg1, arg2Copy, arg3})
	fake.insertManyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMongoDBInterface) InsertManyCallCount() int {
	fake.insertManyMutex.RLock()
	defer fake.insertManyMutex.RUnlock()
	return len(fake.insertManyArgsForCall)
}

func (fake *FakeMongoDBInterface) InsertManyCalls(stub func(context.Context, []interface{}, ...*options.InsertManyOptions) (*mongo.InsertManyResult, error)) {
	fake.insertManyMutex.Lock()
	defer fake.insertManyMutex.Unlock()
	fake.InsertManyStub = stub
}

func (fake *FakeMongoDBInterface) InsertManyArgsForCall(i int) (context.Context, []interface{}, []*options.InsertManyOptions) {
	fake.insertManyMutex.RLock()
	defer fake.insertManyMutex.RUnlock()
	argsForCall := fake.insertManyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMongoDBInterface) InsertManyReturns(result1 *mongo.InsertManyResult, result2 error) {
	fake.insertManyMutex.Lock()
	defer fake.insertManyMutex.Unlock()
	fake.InsertManyStub = nil
	fake.insertManyReturns = struct {
		result1 *mongo.InsertManyResult
		result2 error
	}{result1, result2}
}

func (fake *FakeMongoDBInterface) InsertManyReturnsOnCall(i int, result1 *mongo.InsertManyResult, result2 error) {
	fake.insertManyMutex.Lock()
	defer fake.insertManyMutex.Unlock()
	fake.InsertManyStub = nil
	if fake.insertManyReturnsOnCall == nil {
		fake.insertManyReturnsOnCall = make(map[int]struct {
			result1 *mongo.InsertManyResult
			result2 error
		})
	}
	fake.insertManyReturnsOnCall[i] = struct {
		result1 *mongo.InsertManyResult
		result2 error
	}{result1, result2}
}

func (fake *FakeMongoDBInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	fake.insertManyMutex.RLock()
	defer fake.insertManyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMongoDBInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ datasource.MongoDBInterface = new(FakeMongoDBInterface)
