// Code generated by counterfeiter. DO NOT EDIT.
package routesfakes

import (
	"example-project/routes"
	"sync"

	"github.com/gin-gonic/gin"
)

type FakeHandlerInterface struct {
	CreateProposalsHandlerStub        func(*gin.Context)
	createProposalsHandlerMutex       sync.RWMutex
	createProposalsHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	CreateUserHandlerStub        func(*gin.Context)
	createUserHandlerMutex       sync.RWMutex
	createUserHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	DeleteProposalHandlerStub        func(*gin.Context)
	deleteProposalHandlerMutex       sync.RWMutex
	deleteProposalHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	DeleteUserHandlerStub        func(*gin.Context)
	deleteUserHandlerMutex       sync.RWMutex
	deleteUserHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	GetAllUserHandlerStub        func(*gin.Context)
	getAllUserHandlerMutex       sync.RWMutex
	getAllUserHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	GetProposalsByIdStub        func(*gin.Context)
	getProposalsByIdMutex       sync.RWMutex
	getProposalsByIdArgsForCall []struct {
		arg1 *gin.Context
	}
	GetTeamMemberHandlerStub        func(*gin.Context)
	getTeamMemberHandlerMutex       sync.RWMutex
	getTeamMemberHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	GetUserHandlerStub        func(*gin.Context)
	getUserHandlerMutex       sync.RWMutex
	getUserHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	LoginUserHandlerStub        func(*gin.Context)
	loginUserHandlerMutex       sync.RWMutex
	loginUserHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	LogoutUserHandlerStub        func(*gin.Context)
	logoutUserHandlerMutex       sync.RWMutex
	logoutUserHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	PermissionMiddlewareStub        func(*gin.Context)
	permissionMiddlewareMutex       sync.RWMutex
	permissionMiddlewareArgsForCall []struct {
		arg1 *gin.Context
	}
	RefreshTokenHandlerStub        func(*gin.Context)
	refreshTokenHandlerMutex       sync.RWMutex
	refreshTokenHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	UpdateProposalsHandlerStub        func(*gin.Context)
	updateProposalsHandlerMutex       sync.RWMutex
	updateProposalsHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	UpdateUserHandlerStub        func(*gin.Context)
	updateUserHandlerMutex       sync.RWMutex
	updateUserHandlerArgsForCall []struct {
		arg1 *gin.Context
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandlerInterface) CreateProposalsHandler(arg1 *gin.Context) {
	fake.createProposalsHandlerMutex.Lock()
	fake.createProposalsHandlerArgsForCall = append(fake.createProposalsHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.CreateProposalsHandlerStub
	fake.recordInvocation("CreateProposalsHandler", []interface{}{arg1})
	fake.createProposalsHandlerMutex.Unlock()
	if stub != nil {
		fake.CreateProposalsHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) CreateProposalsHandlerCallCount() int {
	fake.createProposalsHandlerMutex.RLock()
	defer fake.createProposalsHandlerMutex.RUnlock()
	return len(fake.createProposalsHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) CreateProposalsHandlerCalls(stub func(*gin.Context)) {
	fake.createProposalsHandlerMutex.Lock()
	defer fake.createProposalsHandlerMutex.Unlock()
	fake.CreateProposalsHandlerStub = stub
}

func (fake *FakeHandlerInterface) CreateProposalsHandlerArgsForCall(i int) *gin.Context {
	fake.createProposalsHandlerMutex.RLock()
	defer fake.createProposalsHandlerMutex.RUnlock()
	argsForCall := fake.createProposalsHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) CreateUserHandler(arg1 *gin.Context) {
	fake.createUserHandlerMutex.Lock()
	fake.createUserHandlerArgsForCall = append(fake.createUserHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.CreateUserHandlerStub
	fake.recordInvocation("CreateUserHandler", []interface{}{arg1})
	fake.createUserHandlerMutex.Unlock()
	if stub != nil {
		fake.CreateUserHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) CreateUserHandlerCallCount() int {
	fake.createUserHandlerMutex.RLock()
	defer fake.createUserHandlerMutex.RUnlock()
	return len(fake.createUserHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) CreateUserHandlerCalls(stub func(*gin.Context)) {
	fake.createUserHandlerMutex.Lock()
	defer fake.createUserHandlerMutex.Unlock()
	fake.CreateUserHandlerStub = stub
}

func (fake *FakeHandlerInterface) CreateUserHandlerArgsForCall(i int) *gin.Context {
	fake.createUserHandlerMutex.RLock()
	defer fake.createUserHandlerMutex.RUnlock()
	argsForCall := fake.createUserHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) DeleteProposalHandler(arg1 *gin.Context) {
	fake.deleteProposalHandlerMutex.Lock()
	fake.deleteProposalHandlerArgsForCall = append(fake.deleteProposalHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.DeleteProposalHandlerStub
	fake.recordInvocation("DeleteProposalHandler", []interface{}{arg1})
	fake.deleteProposalHandlerMutex.Unlock()
	if stub != nil {
		fake.DeleteProposalHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) DeleteProposalHandlerCallCount() int {
	fake.deleteProposalHandlerMutex.RLock()
	defer fake.deleteProposalHandlerMutex.RUnlock()
	return len(fake.deleteProposalHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) DeleteProposalHandlerCalls(stub func(*gin.Context)) {
	fake.deleteProposalHandlerMutex.Lock()
	defer fake.deleteProposalHandlerMutex.Unlock()
	fake.DeleteProposalHandlerStub = stub
}

func (fake *FakeHandlerInterface) DeleteProposalHandlerArgsForCall(i int) *gin.Context {
	fake.deleteProposalHandlerMutex.RLock()
	defer fake.deleteProposalHandlerMutex.RUnlock()
	argsForCall := fake.deleteProposalHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) DeleteUserHandler(arg1 *gin.Context) {
	fake.deleteUserHandlerMutex.Lock()
	fake.deleteUserHandlerArgsForCall = append(fake.deleteUserHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.DeleteUserHandlerStub
	fake.recordInvocation("DeleteUserHandler", []interface{}{arg1})
	fake.deleteUserHandlerMutex.Unlock()
	if stub != nil {
		fake.DeleteUserHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) DeleteUserHandlerCallCount() int {
	fake.deleteUserHandlerMutex.RLock()
	defer fake.deleteUserHandlerMutex.RUnlock()
	return len(fake.deleteUserHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) DeleteUserHandlerCalls(stub func(*gin.Context)) {
	fake.deleteUserHandlerMutex.Lock()
	defer fake.deleteUserHandlerMutex.Unlock()
	fake.DeleteUserHandlerStub = stub
}

func (fake *FakeHandlerInterface) DeleteUserHandlerArgsForCall(i int) *gin.Context {
	fake.deleteUserHandlerMutex.RLock()
	defer fake.deleteUserHandlerMutex.RUnlock()
	argsForCall := fake.deleteUserHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) GetAllUserHandler(arg1 *gin.Context) {
	fake.getAllUserHandlerMutex.Lock()
	fake.getAllUserHandlerArgsForCall = append(fake.getAllUserHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.GetAllUserHandlerStub
	fake.recordInvocation("GetAllUserHandler", []interface{}{arg1})
	fake.getAllUserHandlerMutex.Unlock()
	if stub != nil {
		fake.GetAllUserHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) GetAllUserHandlerCallCount() int {
	fake.getAllUserHandlerMutex.RLock()
	defer fake.getAllUserHandlerMutex.RUnlock()
	return len(fake.getAllUserHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) GetAllUserHandlerCalls(stub func(*gin.Context)) {
	fake.getAllUserHandlerMutex.Lock()
	defer fake.getAllUserHandlerMutex.Unlock()
	fake.GetAllUserHandlerStub = stub
}

func (fake *FakeHandlerInterface) GetAllUserHandlerArgsForCall(i int) *gin.Context {
	fake.getAllUserHandlerMutex.RLock()
	defer fake.getAllUserHandlerMutex.RUnlock()
	argsForCall := fake.getAllUserHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) GetProposalsById(arg1 *gin.Context) {
	fake.getProposalsByIdMutex.Lock()
	fake.getProposalsByIdArgsForCall = append(fake.getProposalsByIdArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.GetProposalsByIdStub
	fake.recordInvocation("GetProposalsById", []interface{}{arg1})
	fake.getProposalsByIdMutex.Unlock()
	if stub != nil {
		fake.GetProposalsByIdStub(arg1)
	}
}

func (fake *FakeHandlerInterface) GetProposalsByIdCallCount() int {
	fake.getProposalsByIdMutex.RLock()
	defer fake.getProposalsByIdMutex.RUnlock()
	return len(fake.getProposalsByIdArgsForCall)
}

func (fake *FakeHandlerInterface) GetProposalsByIdCalls(stub func(*gin.Context)) {
	fake.getProposalsByIdMutex.Lock()
	defer fake.getProposalsByIdMutex.Unlock()
	fake.GetProposalsByIdStub = stub
}

func (fake *FakeHandlerInterface) GetProposalsByIdArgsForCall(i int) *gin.Context {
	fake.getProposalsByIdMutex.RLock()
	defer fake.getProposalsByIdMutex.RUnlock()
	argsForCall := fake.getProposalsByIdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) GetTeamMemberHandler(arg1 *gin.Context) {
	fake.getTeamMemberHandlerMutex.Lock()
	fake.getTeamMemberHandlerArgsForCall = append(fake.getTeamMemberHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.GetTeamMemberHandlerStub
	fake.recordInvocation("GetTeamMemberHandler", []interface{}{arg1})
	fake.getTeamMemberHandlerMutex.Unlock()
	if stub != nil {
		fake.GetTeamMemberHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) GetTeamMemberHandlerCallCount() int {
	fake.getTeamMemberHandlerMutex.RLock()
	defer fake.getTeamMemberHandlerMutex.RUnlock()
	return len(fake.getTeamMemberHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) GetTeamMemberHandlerCalls(stub func(*gin.Context)) {
	fake.getTeamMemberHandlerMutex.Lock()
	defer fake.getTeamMemberHandlerMutex.Unlock()
	fake.GetTeamMemberHandlerStub = stub
}

func (fake *FakeHandlerInterface) GetTeamMemberHandlerArgsForCall(i int) *gin.Context {
	fake.getTeamMemberHandlerMutex.RLock()
	defer fake.getTeamMemberHandlerMutex.RUnlock()
	argsForCall := fake.getTeamMemberHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) GetUserHandler(arg1 *gin.Context) {
	fake.getUserHandlerMutex.Lock()
	fake.getUserHandlerArgsForCall = append(fake.getUserHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.GetUserHandlerStub
	fake.recordInvocation("GetUserHandler", []interface{}{arg1})
	fake.getUserHandlerMutex.Unlock()
	if stub != nil {
		fake.GetUserHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) GetUserHandlerCallCount() int {
	fake.getUserHandlerMutex.RLock()
	defer fake.getUserHandlerMutex.RUnlock()
	return len(fake.getUserHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) GetUserHandlerCalls(stub func(*gin.Context)) {
	fake.getUserHandlerMutex.Lock()
	defer fake.getUserHandlerMutex.Unlock()
	fake.GetUserHandlerStub = stub
}

func (fake *FakeHandlerInterface) GetUserHandlerArgsForCall(i int) *gin.Context {
	fake.getUserHandlerMutex.RLock()
	defer fake.getUserHandlerMutex.RUnlock()
	argsForCall := fake.getUserHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) LoginUserHandler(arg1 *gin.Context) {
	fake.loginUserHandlerMutex.Lock()
	fake.loginUserHandlerArgsForCall = append(fake.loginUserHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.LoginUserHandlerStub
	fake.recordInvocation("LoginUserHandler", []interface{}{arg1})
	fake.loginUserHandlerMutex.Unlock()
	if stub != nil {
		fake.LoginUserHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) LoginUserHandlerCallCount() int {
	fake.loginUserHandlerMutex.RLock()
	defer fake.loginUserHandlerMutex.RUnlock()
	return len(fake.loginUserHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) LoginUserHandlerCalls(stub func(*gin.Context)) {
	fake.loginUserHandlerMutex.Lock()
	defer fake.loginUserHandlerMutex.Unlock()
	fake.LoginUserHandlerStub = stub
}

func (fake *FakeHandlerInterface) LoginUserHandlerArgsForCall(i int) *gin.Context {
	fake.loginUserHandlerMutex.RLock()
	defer fake.loginUserHandlerMutex.RUnlock()
	argsForCall := fake.loginUserHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) LogoutUserHandler(arg1 *gin.Context) {
	fake.logoutUserHandlerMutex.Lock()
	fake.logoutUserHandlerArgsForCall = append(fake.logoutUserHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.LogoutUserHandlerStub
	fake.recordInvocation("LogoutUserHandler", []interface{}{arg1})
	fake.logoutUserHandlerMutex.Unlock()
	if stub != nil {
		fake.LogoutUserHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) LogoutUserHandlerCallCount() int {
	fake.logoutUserHandlerMutex.RLock()
	defer fake.logoutUserHandlerMutex.RUnlock()
	return len(fake.logoutUserHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) LogoutUserHandlerCalls(stub func(*gin.Context)) {
	fake.logoutUserHandlerMutex.Lock()
	defer fake.logoutUserHandlerMutex.Unlock()
	fake.LogoutUserHandlerStub = stub
}

func (fake *FakeHandlerInterface) LogoutUserHandlerArgsForCall(i int) *gin.Context {
	fake.logoutUserHandlerMutex.RLock()
	defer fake.logoutUserHandlerMutex.RUnlock()
	argsForCall := fake.logoutUserHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) PermissionMiddleware(arg1 *gin.Context) {
	fake.permissionMiddlewareMutex.Lock()
	fake.permissionMiddlewareArgsForCall = append(fake.permissionMiddlewareArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.PermissionMiddlewareStub
	fake.recordInvocation("PermissionMiddleware", []interface{}{arg1})
	fake.permissionMiddlewareMutex.Unlock()
	if stub != nil {
		fake.PermissionMiddlewareStub(arg1)
	}
}

func (fake *FakeHandlerInterface) PermissionMiddlewareCallCount() int {
	fake.permissionMiddlewareMutex.RLock()
	defer fake.permissionMiddlewareMutex.RUnlock()
	return len(fake.permissionMiddlewareArgsForCall)
}

func (fake *FakeHandlerInterface) PermissionMiddlewareCalls(stub func(*gin.Context)) {
	fake.permissionMiddlewareMutex.Lock()
	defer fake.permissionMiddlewareMutex.Unlock()
	fake.PermissionMiddlewareStub = stub
}

func (fake *FakeHandlerInterface) PermissionMiddlewareArgsForCall(i int) *gin.Context {
	fake.permissionMiddlewareMutex.RLock()
	defer fake.permissionMiddlewareMutex.RUnlock()
	argsForCall := fake.permissionMiddlewareArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) RefreshTokenHandler(arg1 *gin.Context) {
	fake.refreshTokenHandlerMutex.Lock()
	fake.refreshTokenHandlerArgsForCall = append(fake.refreshTokenHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.RefreshTokenHandlerStub
	fake.recordInvocation("RefreshTokenHandler", []interface{}{arg1})
	fake.refreshTokenHandlerMutex.Unlock()
	if stub != nil {
		fake.RefreshTokenHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) RefreshTokenHandlerCallCount() int {
	fake.refreshTokenHandlerMutex.RLock()
	defer fake.refreshTokenHandlerMutex.RUnlock()
	return len(fake.refreshTokenHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) RefreshTokenHandlerCalls(stub func(*gin.Context)) {
	fake.refreshTokenHandlerMutex.Lock()
	defer fake.refreshTokenHandlerMutex.Unlock()
	fake.RefreshTokenHandlerStub = stub
}

func (fake *FakeHandlerInterface) RefreshTokenHandlerArgsForCall(i int) *gin.Context {
	fake.refreshTokenHandlerMutex.RLock()
	defer fake.refreshTokenHandlerMutex.RUnlock()
	argsForCall := fake.refreshTokenHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) UpdateProposalsHandler(arg1 *gin.Context) {
	fake.updateProposalsHandlerMutex.Lock()
	fake.updateProposalsHandlerArgsForCall = append(fake.updateProposalsHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.UpdateProposalsHandlerStub
	fake.recordInvocation("UpdateProposalsHandler", []interface{}{arg1})
	fake.updateProposalsHandlerMutex.Unlock()
	if stub != nil {
		fake.UpdateProposalsHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) UpdateProposalsHandlerCallCount() int {
	fake.updateProposalsHandlerMutex.RLock()
	defer fake.updateProposalsHandlerMutex.RUnlock()
	return len(fake.updateProposalsHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) UpdateProposalsHandlerCalls(stub func(*gin.Context)) {
	fake.updateProposalsHandlerMutex.Lock()
	defer fake.updateProposalsHandlerMutex.Unlock()
	fake.UpdateProposalsHandlerStub = stub
}

func (fake *FakeHandlerInterface) UpdateProposalsHandlerArgsForCall(i int) *gin.Context {
	fake.updateProposalsHandlerMutex.RLock()
	defer fake.updateProposalsHandlerMutex.RUnlock()
	argsForCall := fake.updateProposalsHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) UpdateUserHandler(arg1 *gin.Context) {
	fake.updateUserHandlerMutex.Lock()
	fake.updateUserHandlerArgsForCall = append(fake.updateUserHandlerArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.UpdateUserHandlerStub
	fake.recordInvocation("UpdateUserHandler", []interface{}{arg1})
	fake.updateUserHandlerMutex.Unlock()
	if stub != nil {
		fake.UpdateUserHandlerStub(arg1)
	}
}

func (fake *FakeHandlerInterface) UpdateUserHandlerCallCount() int {
	fake.updateUserHandlerMutex.RLock()
	defer fake.updateUserHandlerMutex.RUnlock()
	return len(fake.updateUserHandlerArgsForCall)
}

func (fake *FakeHandlerInterface) UpdateUserHandlerCalls(stub func(*gin.Context)) {
	fake.updateUserHandlerMutex.Lock()
	defer fake.updateUserHandlerMutex.Unlock()
	fake.UpdateUserHandlerStub = stub
}

func (fake *FakeHandlerInterface) UpdateUserHandlerArgsForCall(i int) *gin.Context {
	fake.updateUserHandlerMutex.RLock()
	defer fake.updateUserHandlerMutex.RUnlock()
	argsForCall := fake.updateUserHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandlerInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createProposalsHandlerMutex.RLock()
	defer fake.createProposalsHandlerMutex.RUnlock()
	fake.createUserHandlerMutex.RLock()
	defer fake.createUserHandlerMutex.RUnlock()
	fake.deleteProposalHandlerMutex.RLock()
	defer fake.deleteProposalHandlerMutex.RUnlock()
	fake.deleteUserHandlerMutex.RLock()
	defer fake.deleteUserHandlerMutex.RUnlock()
	fake.getAllUserHandlerMutex.RLock()
	defer fake.getAllUserHandlerMutex.RUnlock()
	fake.getProposalsByIdMutex.RLock()
	defer fake.getProposalsByIdMutex.RUnlock()
	fake.getTeamMemberHandlerMutex.RLock()
	defer fake.getTeamMemberHandlerMutex.RUnlock()
	fake.getUserHandlerMutex.RLock()
	defer fake.getUserHandlerMutex.RUnlock()
	fake.loginUserHandlerMutex.RLock()
	defer fake.loginUserHandlerMutex.RUnlock()
	fake.logoutUserHandlerMutex.RLock()
	defer fake.logoutUserHandlerMutex.RUnlock()
	fake.permissionMiddlewareMutex.RLock()
	defer fake.permissionMiddlewareMutex.RUnlock()
	fake.refreshTokenHandlerMutex.RLock()
	defer fake.refreshTokenHandlerMutex.RUnlock()
	fake.updateProposalsHandlerMutex.RLock()
	defer fake.updateProposalsHandlerMutex.RUnlock()
	fake.updateUserHandlerMutex.RLock()
	defer fake.updateUserHandlerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandlerInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ routes.HandlerInterface = new(FakeHandlerInterface)
